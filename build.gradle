buildscript {
    ext.kotlin_version = '1.2.40'
    ext.spring_version = '2.0.3.RELEASE'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id "org.jetbrains.dokka" version "0.9.16"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'


group 'com.kameocode'
archivesBaseName = "any-dao-spring"
version '1.0.3-SNAPSHOT'

description 'any-dao-spring is an any-dao Kotlin extension for spring JPA repositories.'


sourceCompatibility = 1.8


spring_version = '2.0.3.RELEASE'

repositories {
    mavenCentral()
    mavenLocal()
}
javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}


tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ['-Xenable-jvm-default', '-Xjvm-default=enable']
    }
}

dependencies {
    compileOnly (
            "org.springframework.boot:spring-boot-starter-data-jpa:$spring_version",
            "org.hibernate:hibernate-entitymanager:5.2.16.Final"
    )
    testCompile (
            "org.springframework.boot:spring-boot-starter-data-jpa:$spring_version",
            "org.hibernate:hibernate-entitymanager:5.2.16.Final"
    )

    testCompile "org.springframework.boot:spring-boot-starter-test:$spring_version"

    compile 'com.kameocode:any-dao:1.0.2'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "com.h2database:h2:1.4.196"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc, group: "documentation") {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}


uploadArchives {
    repositories {
        mavenDeployer {


            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            String tossrhUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
            String tossrhPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: tossrhUsername, password: tossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: tossrhUsername, password: tossrhPassword)
            }
            //repository(url: mavenLocal().url)


            pom.project {
                name = "${project.group}:${archivesBaseName}"
                description = project.description
                url = 'https://github.com/kameocode/any-dao'

                inceptionYear = '2018'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'vinga'
                        name = 'Kamila Myczkowska'
                        email = 'kamila.myczkowska@gmail.com'
                        organization = 'KameoCode'
                        organizationUrl = 'http://kameocode.com'
                    }
                }

                scm {
                    connection 'scm:git:git://github.com/kameocode/any-dao.git'
                    developerConnection 'scm:git:ssh://github.com/kameocode/any-dao.git'
                    url 'http://github.com/kameocode/any-dao/tree/master'
                }
            }
        }
    }
}


